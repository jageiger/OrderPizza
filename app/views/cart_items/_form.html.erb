<% if current_user.try(:admin?) %>
	<%= form_for(@cart_item) do |f| %>
  		<% if @cart_item.errors.any? %>
    		<div id="error_explanation">
      			<h2><%= pluralize(@cart_item.errors.count, "error") %> prohibited this cart_item from being saved:</h2>

      			<ul>
      				<% @cart_item.errors.full_messages.each do |message| %>
        				<li><%= message %></li>
      				<% end %>
      			</ul>
    		</div>
  		<% end %>

  		<div class="form-group">
    		<%= f.label :user_id %><br>
    		<%= f.number_field :user_id, class: 'form-control' %>
  		</div>
  		<div class="form-group">
    		<%= f.label :order_id %><br>
    		<%= f.number_field :order_id, class: 'form-control' %>
  		</div>
  		<div class="form-group">
    		<%= f.label :item_id %><br>
    		<%= f.number_field :item_id, class: 'form-control' %>
  		</div>
  		<div class="form-group">
    		<%= f.label :price %><br>
    		<%= f.text_field :price, class: 'form-control' %>
  		</div>
  		<div class="form-group">
    		<%= f.label :quantity %><br>
    		<%= f.number_field :quantity, class: 'form-control' %>
  		</div>
  		<div class="form-group">
    		<%= f.label :special_instructions %><br>
    		<%= f.text_area :special_instructions, class: 'form-control' %>
  		</div>
	  	<div class="form-group">
	    	<%= f.submit 'Submit', class: "btn btn-primary" %>
	  	</div>
	<% end %>

<% else %>
	<%= form_for(@cart_item) do |f| %>
  		<% if @cart_item.errors.any? %>
    		<div id="error_explanation">
      			<h2><%= pluralize(@cart_item.errors.count, "error") %> prohibited this cart_item from being saved:</h2>

      			<ul>
      				<% @cart_item.errors.full_messages.each do |message| %>
        				<li><%= message %></li>
      				<% end %>
      			</ul>
    		</div>
  		<% end %>

		<p><%= @item.description %></p>
		<% options = AppliedModGroup.all.select{ |t| t.item_id == @item.id }%>
		<% options.each do |applied_mod_group| %>
			<% modifier_groups = ModifierGroup.all.select{ |t| t.id == applied_mod_group.modifier_group_id }%>
			<% modifier_groups.each do |modifier_group| %>
				<% grouped_modifiers = GroupedModifier.all.select{ |t| t.modifier_group_id = modifier_group.id }%>
				<% grouped_modifiers.each do |grouped_modifer| %>
					<% modifier = Modifier.find(grouped_modifer.modifier_id) %>
					
					<%= modifier.name %><br>
					<%# if click, then AJAX a form request for a new 'selected' modifier, as well as update CSS? Uh-oh. There's the definite problem of using this form for a item that doesn't exist... How can I give it a cart_item, when the record of the cart_item isn't yet saved? It looks like I will HAVE to save the item before I can apply modifiers. Perhaps I can discreetly save it? So, when they click "Add to Cart", it creates it and saves it, and then redirects to the edit page. The submit button for this form instead says "Update Item"... Well, actually, the user doesn't see a form for the new method, right? It takes them to the edit, which has a cart_item id, so I do the rest as AJAX requests. %>
				<% end%>
			
				<%# modifiers = Modifier.all.select{ |t| t.}%>
			
			<% end %>
			
		
		
		<% end %>
		
		<div class="form-group">
			<%= f.hidden_field :item_id %>
			<%= f.hidden_field :user_id %>
			<%= f.hidden_field :order_id %>
		</div>

  		<div class="form-group">
    		<%= f.label :quantity %><br>
    		<%= f.number_field :quantity, class: 'form-control' %>
  		</div>
  		<div class="form-group">
    		<%= f.label :special_instructions %><br>
    		<%= f.text_area :special_instructions, class: 'form-control' %>
  		</div>

		<div class="form-group">
			<% if @cart_item.new_record? %>
		    	<%= f.submit 'Add to cart', class: "btn btn-primary" %>
			<% else %>
		  		<%= f.submit 'Update', class: "btn btn-primary" %>
			<% end %>
		</div>
	<% end %>	
<% end %>