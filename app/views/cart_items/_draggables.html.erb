<% @ca = s_mod %>
<% @cart_item = CartItem.find(@ca.cart_item_id) %>

<% selected_mods = SelectedModifier.all.select{ |t| t.cart_item_id == @cart_item.id }%>


	<% selected_mods.each_with_index do |sel, i| %>
		<% mod = Modifier.find(sel.modifier_id) %>
		<%# I'm guessing that the form needs to send the selected_modifier the x y screenx scry and rapper stuff, so I can do the calculation... and default the modifier to the center of the screen. NEED TO SET UP DROP ZONES TO RECEIVE EACH DRAGGABLE. %>
		
		

		
		<div id="drag-<%= sel.id %>" class="draggable js-drag" data-x="<%= sel.xpos %>" data-y="<%= sel.ypos %>" data-scrx="<%= sel.scrx %>" data-scry="<%= sel.scry %>" data-rapper="<%= sel.rapper %>" data-sel="<%= sel.id %>" data-mn="<%= mod.name %>" data-mid="<%= mod.id %>" ><% grup = ModifierGroup.find(sel.applied_mod_group_id) %><%# image_tag "#{mod.file}", :class => "" %>
			<span class="draggable-art"><%= image_tag(mod.file, class: "draggable-art draggable-pic") %></span>
			<span>
		<% if grup.child %>
			<%= grup.prepend_name %> <%= mod.name %>
		<% else %>
			<%= mod.name %>
		<% end %></span></div>
		<!-- also need to ... give the user the instruction to drag it around (because it won't automatically be part of a group)
		maybe it should say, instead of the topping name "Drag me!" and then change color and display the proper name at that point. -->
		
		<%= form_for(sel, :remote => true, :html=>{:id=>"form-#{sel.id}", :style=>"" }, validate: true) do |g| %>
			<%= g.hidden_field :applied_mod_group_id, :value => sel.applied_mod_group_id, :id=>"group-#{sel.id}" %>
			<%= g.hidden_field :xpos, :value => sel.xpos, :id=>"xpos-#{sel.id}" %>
			<%= g.hidden_field :ypos, :value => sel.ypos, :id=>"ypos-#{sel.id}" %>
			<%= g.hidden_field :scrx, :value => sel.scrx, :id=>"scrx-#{sel.id}" %>
			<%= g.hidden_field :scry, :value => sel.scry, :id=>"scry-#{sel.id}" %>
			<%= g.hidden_field :rapper, :value => sel.rapper, :id=>"rapper-#{sel.id}" %>
			<%= g.submit nil, :class => 'btn btn-primary', :name => 'selSub', :style => 'display:none;' %>
		<% end %>
		
		
	<% end %> 

<div>
</div>

	<script>

	(function (interact) {

	    'use strict';

	    var transformProp;

	    interact.maxInteractions(Infinity);

	    // setup drop areas.
	    // dropzone #1 accepts draggable #1



		//setup each dropzone to accept each draggable.
		// when they are created, I'll need to give them unique IDs, and then use those IDs here to look them up.

		  setupDropzone('.js-drop', '<% selected_mods.each_with_index do |sel, i| %>#drag-<%= sel.id %><% if i < selected_mods.count - 1 %>, <% end %><% end %>');



	    /**
	     * Setup a given element as a dropzone.
	     *
	     * @param {HTMLElement|String} el
	     * @param {String} accept
	     */
		function setupDropzone(el, accept) {
	        interact(el)
	            .dropzone({
	                accept: accept,
	                ondropactivate: function (event) {
	                    addClass(event.relatedTarget, '-drop-possible');
						//send form

						/*
						var totalHeight = parseInt($(window).height());

						if(parseInt($(window).width())-30 > (html.clientHeight-offset) ){ 
							totalHeight = parseInt($(window).height()) - offset;
							if (parseInt($(window).width()) < 850 ){
								totalHeight = totalHeight * 0.9;
							}
						}
						else if(parseInt($(window).width())-30 < (html.clientHeight-offset) ){
							totalHeight = parseInt($(window).width()) -30;
							if (parseInt($(window).width()) < 850 ){
								totalHeight = totalHeight * 0.9;
							}
						}

						event.relatedTarget.css('height',totalHeight / 15);


						*/


	                },
	                ondropdeactivate: function (event) {
	                    removeClass(event.relatedTarget, '-drop-possible');
						//this function may not be necessary...
	                }
	            })
	            .on('dropactivate', function (event) {
	                var active = event.target.getAttribute('active')|0;

	                // change style if it was previously not active
	                if (active === 0) {
	                    addClass(event.target, '-drop-possible');
	                    //event.target.textContent = 'Drop me here!';


						var totalHeight = parseInt($(window).height());

						if(parseInt($(window).width())-30 > (html.clientHeight-offset) ){ 
							totalHeight = parseInt($(window).height()) - offset;
							if (parseInt($(window).width()) < 850 ){
								totalHeight = totalHeight * 0.9;
							}
						}
						else if(parseInt($(window).width())-30 < (html.clientHeight-offset) ){
							totalHeight = parseInt($(window).width()) -30;
							if (parseInt($(window).width()) < 850 ){
								totalHeight = totalHeight * 0.9;
							}
						}

					//	event.relatedTarget.css('height');



	                }

	                event.target.setAttribute('active', active + 1);
	            })
	            .on('dropdeactivate', function (event) {
	                var active = event.target.getAttribute('active')|0;

	                // change style if it was previously active
	                // but will no longer be active
	                if (active === 1) {
	                    removeClass(event.target, '-drop-possible');
	                    //event.target.textContent = 'Dropzone';
	                }




	                event.target.setAttribute('active', active - 1);
	            })
	            .on('dragenter', function (event) {
	                addClass(event.target, '-drop-over');
	                event.relatedTarget.lastChild.textContent = 'I\'m in';
					removeClass(event.relatedTarget, '-delete');

					//show appropriate bg


					var whole = $('#whole').data('gid');
					var left = $('#left').data('gid');
					var right = $('#right').data('gid');
	//				var parent  = $('#tops-'+event.relatedTarget.getAttribute('data-sel')).data('parent');
					var parent  = event.target.getAttribute('data-gid');


				//	alert(parent+" - "+whole);
					if(parent==whole){
					//	alert("whole!");
						document.getElementById("whole-sel").style.display = 'block';
						event.relatedTarget.lastChild.textContent = 'Whole';


					}
					else if(parent==left){
						document.getElementById("left-sel").style.display = 'block';
						event.relatedTarget.lastChild.textContent = 'Left';

					}
					else if(parent==right){
						document.getElementById("right-sel").style.display = 'block';
						event.relatedTarget.lastChild.textContent = 'Right';

					}
					event.relatedTarget.setAttribute('data-gid', parent);


	            })
	            .on('dragleave', function (event) {
	                removeClass(event.target, '-drop-over');
	                event.relatedTarget.lastChild.textContent = 'Delete';
					addClass(event.relatedTarget, '-delete');


					//hide bg
						var whole = $('#whole').data('gid');
						var left = $('#left').data('gid');
						var right = $('#right').data('gid');
						var parent  = event.target.getAttribute('data-gid');



					//	alert(parent+" - "+whole);
						if(parent==whole){
						//	alert("whole!");
							document.getElementById("whole-sel").style.display = 'none';
						}
						else if(parent==left){
							document.getElementById("left-sel").style.display = 'none';					
						}
						else if(parent==right){
							document.getElementById("right-sel").style.display = 'none';
						}
						event.relatedTarget.setAttribute('data-gid', -1);


	            })
	            .on('drop', function (event) {
	                //hide ALL bgs
					document.getElementById("whole-sel").style.display = 'none';

					document.getElementById("left-sel").style.display = 'none';		
					document.getElementById("right-sel").style.display = 'none';



					// now how do I determine which dropzone it is? left right or whole?

	//				alert(event.relatedTarget.getAttribute('data-x'));
					//alert(event.interaction.x);

					var selId = event.relatedTarget.getAttribute('data-sel');


					//alert(event.target.getAttribute('data-gid'));

		//				alert(selId);

					//alert(event.target.getAttribute('data-x'));

					//alert($('#xpos-'+selId).val());
					$('#xpos-'+selId).val(event.interaction.x);
					$('#ypos-'+selId).val(event.interaction.y);
					$('#scrx-'+selId).val(parseInt($(window).width()));
					$('#scry-'+selId).val(parseInt($(window).height()));
					$('#rapper-'+selId).val(parseInt($('#rapper').width())); 

					$('#group-'+selId).val(event.target.getAttribute('data-gid')); 

					// get form by id... then submit...
					// then redraw everything, SO IT NEEDS TO BECOME A PARTIAL... I can just refresh for now?
					$('#form-'+selId).submit();


					//need to delete the div now? because it will be replaced...
				//	deletey(selId);

					removeClass(event.target, '-drop-over');
	                event.relatedTarget.lastChild.textContent = event.target.getAttribute('data-pn') + ' '+ event.relatedTarget.getAttribute('data-mn');

	            });
	    }

	    function addClass (element, className) {
	        if (element.classList) {
	            return element.classList.add(className);
	        }
	        else {
	            element.className += ' ' + className;
	        }
	    }

	    function removeClass (element, className) {
	        if (element.classList) {
	            return element.classList.remove(className);
	        }
	        else {
	            element.className = element.className.replace(new RegExp(className + ' *', 'g'), '');
	        }
	    }

	    interact(document).on('ready', function () {
	        transformProp = 'transform' in document.body.style
	            ? 'transform': 'webkitTransform' in document.body.style
	            ? 'webkitTransform': 'mozTransform' in document.body.style
	            ? 'mozTransform': 'oTransform' in document.body.style
	            ? 'oTransform': 'msTransform' in document.body.style
	            ? 'msTransform': null;
	    });

	}(window.interact));
	
	<% @modifier = Modifier.find(@ca.modifier_id) %>
	
	<% if del==false %>
	
	$('#mod-'+<%= @modifier.id %>).attr("onclick", "$.ajax({ type: 'DELETE', url: '/selected_modifiers/<%= @ca.id %>', data: {dropform:1} });deletey(<%= @ca.id %>);");
	
	<% end %>
	
	
	rename(<%= @modifier.id %>);
	
	adjust();

	</script>