<h1><%= @item.name %></h1>

	<p><%= @item.description %></p>
	
	<% c_item = @cart_item %>

	<div id="selected_modifiers">

	<% selected_mods = SelectedModifier.all.select{ |t| t.cart_item_id = @cart_item.id }%>
	<% selected_mods.each do |selected_modifier| %>
		<% modifier = Modifier.find(selected_modifier.modifier_id) %>
		<%= modifier.name %><br>
	<% end %>
	</div>
	
	
	<br>
	
	
	<% options = AppliedModGroup.all.select{ |t| t.item_id == @item.id }%>
	<% options.each do |applied_mod_group| %>
		<% modifier_groups = ModifierGroup.all.select{ |t| t.id == applied_mod_group.modifier_group_id }%>
		<% modifier_groups.each do |modifier_group| %>
			<% grouped_modifiers = GroupedModifier.all.select{ |t| t.modifier_group_id = modifier_group.id }%>
			<% collection_of_mods = [] %>
			<% grouped_modifiers.each do |grouped_modifer| %>
				<% modifier = Modifier.find(grouped_modifer.modifier_id) %>
				<% collection_of_mods.push modifier %>
				
			<% end%>
				
				
				<%# if click, then AJAX a form request for a new 'selected' modifier, as well as update CSS? Uh-oh. There's the definite problem of using this form for a item that doesn't exist... How can I give it a cart_item, when the record of the cart_item isn't yet saved? It looks like I will HAVE to save the item before I can apply modifiers. Perhaps I can discreetly save it? So, when they click "Add to Cart", it creates it and saves it, and then redirects to the edit page. The submit button for this form instead says "Update Item"... Well, actually, the user doesn't see a form for the new method, right? It takes them to the edit, which has a cart_item id, so I do the rest as AJAX requests. %>
	
	
	<%# BEGIN OLD %>
	<% selected_mod = SelectedModifier.new %>
	<%= form_for(selected_mod, :remote => true, :html=>{:id=>'price_form', :style=>'' } ) do |g| %>
	  	<%= modifier_group.name %><br>
	<%= g.hidden_field :cart_item_id, :value => @cart_item.id %>
	
	<%# I could have, instead of the way I WAS doing it, display a collection of modifiers... That would totally work, bro. That would totally work. Like this below one I made before: %>
	<%#= f.select :period, options_for_select([["One Day", 1], ["One Week", 7],["Two Weeks", 14], ["One Month", 30], ["Six Months", 180]], @join.period), {}, onchange: "$('#price_form').submit();", class: "form-control" %>
	<%= g.select :modifier_id, options_from_collection_for_select(collection_of_mods, 'id', 'name'), {}, onchange: "$('#price_form').submit();", class: "form-control" %>
			<%# selected_mod.cart_item = @cart_item %>
			<%# selected_mod.modifier = modifier %>
			<%# selected_mod.save %>
			<% g.submit %>

								<%#= f.select :period, options_for_select([["One Day", 1], ["One Week", 7],["Two Weeks", 14], ["One Month", 30], ["Six Months", 180]], @join.period), {}, onchange: "$('#price_form').submit();", class: "form-control" %>

					
	<% end %>
	
	
	<%# END OLD %>			
				
				
				
				
				
		
		
			<%# modifiers = Modifier.all.select{ |t| t.}%>
		
		<% end %>
		
	
	
	<% end %>

<%= render 'form' %>

<%= link_to 'Show', @cart_item %> |
<%= link_to 'Back', cart_items_path %>
