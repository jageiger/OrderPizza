<% unless @item.fancy_interface %>

<h1><%= @item.name %></h1>

	<div class="well bg-info"><b><span class="text-primary">Description: </span></b><%= @item.description %></div>
	
	
	<% c_item = @cart_item %>

	
	<% # sizes = ItemSize.all.select{ |t| t.item_id == @item.id } %>
	<% #above is the old code. Now we're looking for the appliedsizes %>
	<% sizes = AppliedSize.all.select{ |t| t.item_id == @item.id }%>
	<% if sizes.any? %>
		<% # show selected size %>
		<% collection_of_sizes = [] %>
		<% sizes.each do |applied_size| %>
			<% size = ItemSize.find(applied_size.item_size_id) %>
			<% collection_of_sizes.push size %>
			<% # need to work on sorting!!! %>
		<% end %>
		
		<% # first look for a size already... if there is not already a selected size, %>
		<% possible_sizes = SelectedSize.all.select{ |t| t.cart_item_id == @cart_item.id}%>
		<% unless possible_sizes.any? %>
			<% selection = SelectedSize.new %>
			<%# message = "No size selected"%>
		<% else %>
			<% selection = possible_sizes.first %>
			<% # code to look up the default size (item.size), set the option elect to that value?%>
		<% end %>
		
			<%= form_for(selection, :remote => true, :html=>{:id=>"sizeBox", :style=>"" }, validate: true) do |g| %>
		     <div class="form-group">
	  			<b>Size</b><br>
				<%= g.hidden_field :cart_item_id, :value => @cart_item.id %>
				<div id="sizeBoxError"></div>

				<%= g.select :item_size_id, options_from_collection_for_select(collection_of_sizes, 'id', 'name'), { :prompt => "Select a size" }, :id => "sizeBoxSelect", onchange: " if ( $( '#sizeBoxSelect' ).val()=='' )
	   { $('#sizeBoxError').html('<p>Please do not try to select the placeholder.</p>'); } else { $('#sizeBox').submit(); $('#sizeBoxError').html(''); }", class: "form-control" %>


			  </div>

			<% end %>
		
		
	<% else %>
	<% # There aren't any sizes, default price please%>	
		<% #logically, there couldn't be a selected size if there weren't any sizes to select from %>
	<% end %>
	
	<div id="modifier_groups">
		
	<% options = AppliedModGroup.all.select{ |t| t.item_id == @item.id } %>
	<% options.each do |applied_mod_group| %>
		<% modifier_groups = ModifierGroup.all.select{ |t| t.id == applied_mod_group.modifier_group_id }%>
		
		<% modifier_groups.each do |modifier_group| %>
			<% if modifier_group.child %>
				<% grouped_modifiers = GroupedModifier.all.select{ |t| t.modifier_group_id == modifier_group.parent_modifier_group_id }%>
			<% else %>
				<% grouped_modifiers = GroupedModifier.all.select{ |t| t.modifier_group_id == modifier_group.id }%>
			<% end %>
			<% collection_of_mods = [] %>
			<% grouped_modifiers.each do |grouped_modifer| %>
				<% modifier = Modifier.find(grouped_modifer.modifier_id) %>
				
				<% unless ( modifier_group.prevent_incest && (SelectedModifier.all.select{ |t| t.cart_item_id == @cart_item.id && t.modifier_id == modifier.id}.any?) ) || (SelectedModifier.all.select{ |t| t.cart_item_id == @cart_item.id && t.modifier_id == modifier.id && t.applied_mod_group_id == modifier_group.id }.any?) %>
			    
				
					<% collection_of_mods.push modifier %>
				<% end %>
				
			<% end%>

			<% selected_mod = SelectedModifier.new %>
			<% tempName = modifier_group.name.tr(' ', '_').camelize %>
			<%= form_for(selected_mod, :remote => true, :html=>{:id=>"#{tempName}", :style=>"" }, validate: true) do |g| %>
		     <div class="form-group">
			  <% if(collection_of_mods.any?) %>
	  			<b><%= modifier_group.name %></b><br>
				<%= g.hidden_field :cart_item_id, :value => @cart_item.id %>
				<%= g.hidden_field :applied_mod_group_id, :value => modifier_group.id %>
				<div id="<%= tempName %>Error"></div>
				
				<%= g.select :modifier_id, options_from_collection_for_select(collection_of_mods, 'id', 'name'), { :prompt => "Select '#{modifier_group.name}'" }, :id => "#{tempName}Select", onchange: " if ( $( '##{tempName}Select' ).val()=='' )
	   { $('##{tempName}Error').html('<p>Please do not try to select the placeholder.</p>'); } else { $('##{tempName}').submit(); $('##{tempName}Error').html(''); }", class: "form-control" %>
	
				<% else %>
				<b><%= modifier_group.name %></b><br>
				<div id="<%= tempName %>Error"></div>

				<%= g.select :modifier_id, options_from_collection_for_select(collection_of_mods, 'id', 'name'), { :prompt => "All '#{modifier_group.name.pluralize}' selected." }, :id => "#{tempName}Select", :disabled => "disabled", onchange: " if ( $( '##{tempName}Select' ).val()=='' )
	   { $('##{tempName}Error').html('<p>Please do not try to select the placeholder.</p>'); } else { $('##{tempName}').submit(); $('##{tempName}Error').html(''); }", class: "form-control" %>

				<% end %>
			  </div>

			<% end %>
		<% end %>	
	<% end %>
	</div>
	
	<div id="selected_modifiers">

	<% selected_mods = SelectedModifier.all.select{ |t| t.cart_item_id == @cart_item.id }%>
	<% next_hue = 5 %>
		<div class="row" style="margin-bottom: -20px;">
			<% count = selected_mods.count %>
			<% unless selected_mods.blank? %>
			<% selHue = SelectedModifier.find(selected_mods.last.id).hue %>
			<%# puts "selHue: "+selHue %>
			<% end %>
			
			<% selected_mods.each_with_index do |sel, i| %>
				<% mod = Modifier.find(sel.modifier_id) %>
				<% remainderA = count%3 %>
				<% remainderB = count%4 %>

					<div class="col-xs-6 col-sm-4 col-md-3 col-lg-2">
				
				<% next_hue = next_hue + 1 %>
				<% string = next_hue.to_s(2) # 5, written out as 32bit %>
				
				<%# unless selHue.blank? %>
				<% if sel.hue.blank? %>
				  <% if i > 0 %>
				    <% sel.hue = ((selected_mods[i-1].hue).to_i+1).to_s %>
				  <% else %>
				    <% sel.hue = 6 %>
				  <% end %>
				<% end %>
				
		
					<% string = sel.hue.to_i.to_s(2) %>
					
					<%# else %>
						<%# set hue to five... + 1 %>
						<%# selHue = 5 %>
						<%# string = sel.hue.to_i.to_s(2) %>
					<%# end %>
					
				<% if string.length < 32 %>
					<% num = 32 - string.length %>
					<% newString = "" %>
					<% for i in 1..num do %>
						<% newString += "0" %>
					<% end %>
					<% newString += string %>
					<% string = newString %>
				<% end %>
				<% puts "string"+sel.hue.to_s+": "+string %>
				<% num = reverse(string).to_i(2) %>
				<% numF = num.to_f / (2**32) %>
				
				<% hue = ((numF + 0.6) % 1) %>
				<% degrees = (hue * 360).round # going to save degrees to selected_modifier.color %>
				<% if sel.color.blank? %>
				<% puts "blankblankblank" %>
				
				<% sel.color = degrees.to_s %>

				
				<% end %>
								<% sel.save %>
				
				<% panelStyle = "border-color: hsl(" + sel.color + ", 25%, 65%);" %>
				<% panelHeading = "background-color: hsl(" + sel.color + ", 50%, 65%); border-color: hsl(" + sel.color + ", 25%, 65%);" %>
						<div class="panel panel-info <%= sel.hue %>" style="<%= panelStyle %>" >
					  		<div class="panel-heading" style="<%= panelHeading %>" >
								<% groop = ModifierGroup.find(sel.applied_mod_group_id) %>
								<% if groop.child %>
									<h3 class="panel-title"><%= groop.prepend_name %> <%= mod.name %></h3>
								<% else %>
					    			<h3 class="panel-title"><%= mod.name %></h3>
								<% end %>
					  		</div>
					  		<div class="panel-body">
					    		Further options.<br>
								form to display all the modifier groups, and a button to check if the particular modifier can be added?
								<br>
								<div class="add-button">
									<%= link_to 'Remove', sel, method: :delete, class: "btn btn-primary btn-xs btn-block", style: "", :remote => true %>
								</div>
					  		</div>
						</div>
					</div>
			<% end %>
			
		</div>
		</div>

<%= render 'form' %>

<%= link_to 'Back', orders_path, class: "btn btn-default" %>

<% else %>

<% if @item.interface==1 %>

<style>

#main {
			background-color: rgb(255,220,220);

		}
			
		#sidebar {
			background-color: rgb(220,255,220);

		}
		


		.dropzone-wrapper {

		}

		.dropzone {

		}

		.dropzone.-drop-possible { border-color: #666; }

		.dropzone.-drop-over {
		    background: #666;
		    color: #fff;
		}

		.draggable {
		    position: relative;
		    z-index: 10;
		    width: 200px;
		    margin: .25em;
		    padding: 1em 2em;
		    background-color: #29e;
		    color: #fff;
		    text-align: center;

		    -ms-touch-action: none;
		        touch-action: none;
		}

		.display {
		    position: relative;
		    z-index: 10;
		    width: 200px;
		    margin: .25em;
		    padding: 1em 2em;
		    background-color: #29e;
		    color: #fff;
		    text-align: center;

		    -ms-touch-action: none;
		        touch-action: none;
		}
		.draggable.-drop-possible { background-color: #42bd41; }
		
</style>

	


	<!--
	
	<div class="col-md-3" style="background-color: rgb(220,220,255)">.col-md-1</div>
	  <div class="col-md-6">
	  	<div class="row" id="main" style="height:150px;">
			<div class="col-md-6" id="whole">whole</div>
		</div>
		<div class="row" id="sidebar" style="height:300px;">
		  <div class="col-md-6" id="left" style="background-color: rgb(220,255,220);height:300px;">left</div>
		  <div class="col-md-6" id="right" style="background-color: rgb(110, 255,110);height:300px;">right</div>
		</div>
	  </div>
	<div class="col-md-3" style="background-color: rgb(220,220,255)">.col-md-1</div>
	  -->
	<div style="position: relative;float: none;">
	
	<div id="rapper"  style="position: absolute;float: none; left: 0;right: 0;margin: 0 auto;">
		<div id="whole" class="dropzone js-drop" style="background-color: rgb(255,220,220);height:300px;">whole</div>
	
		<div id="left" class="dropzone js-drop" style="background-color: rgb(220,255,220);width:50%;float:left; clear:left;">left</div>
		<div id="right" class="dropzone js-drop" style="background-color: rgb(110, 255,110);width:50%;float:left;">right</div>
	</div>

</div>

</div>

</div>

</div>
	
		<% collection_of_left_mods = [] %>
		<% collection_of_right_mods = [] %>
		
		<% options = AppliedModGroup.all.select{ |t| t.item_id == @item.id } %>
		<% options.each do |applied_mod_group| %>
			<% modifier_groups = ModifierGroup.all.select{ |t| t.id == applied_mod_group.modifier_group_id && t.interface_position == 1}%>

			<% modifier_groups.each do |modifier_group| %>
				<% if modifier_group.child %>
					<% grouped_modifiers = GroupedModifier.all.select{ |t| t.modifier_group_id == modifier_group.parent_modifier_group_id }%>
				<% else %>
					<% grouped_modifiers = GroupedModifier.all.select{ |t| t.modifier_group_id == modifier_group.id }%>
				<% end %>
				
				<% grouped_modifiers.each do |grouped_modifer| %>
					<% modifier = Modifier.find(grouped_modifer.modifier_id) %>
					
					<% unless ( modifier_group.prevent_incest && (SelectedModifier.all.select{ |t| t.cart_item_id == @cart_item.id && t.modifier_id == modifier.id}.any?) ) || (SelectedModifier.all.select{ |t| t.cart_item_id == @cart_item.id && t.modifier_id == modifier.id && t.applied_mod_group_id == modifier_group.id }.any?) %>


						<!-- change the display if it is selected... the class or css -->
					<% end %>
					<% if modifier.interface_column == 1 %>
						<% collection_of_left_mods.push modifier %>
					<% elsif modifier.interface_column == 2 %>
						<% collection_of_right_mods.push modifier %>
					<% end %>
				<% end %>
			
			
			<!-- draw stuff here? -->
			<% selected_mod = SelectedModifier.new %>
			<% tempName = modifier_group.name.tr(' ', '_').camelize %>
			<%= form_for(selected_mod, :remote => true, :html=>{:id=>"#{tempName}", :style=>"" }, validate: true) do |g| %>
		
			<%= g.hidden_field :cart_item_id, :value => @cart_item.id %>
			<%= g.hidden_field :applied_mod_group_id, :value => modifier_group.id %>
			<%= g.hidden_field :modifier, :value => modifier_group.id %>
			
			<%# Okay, so, %>
			<div style="clear:both;">
				<div id="left-mods" style="float:left; overflow-y:scroll;height:400px; overflow-x: visible;margin-top: -10px;">
					<% collection_of_left_mods.each do |mod| %>
						<div id="mod-<%= mod.id %>" class="display"><%= mod.name %></div>
					<% end %>
				</div>
			
				<div id="right-mods" style="float:right; overflow-y:scroll;height:400px; overflow-x: visible;margin-top: -10px;">
					<% collection_of_right_mods.each do |mod| %>
						<div id="mod-<%= mod.id %>" class="display" ><%= mod.name %></div>
					<% end %>
				</div>
			</div>
			
			
			<% end %>
			
			<% end %>
			
			
		<% end %>
	
		<%# selected modifiers, for each create a draggable %>
	
		
</div>
<div style="position: absolute;float:left;">
	<div id="drag1" class="draggable js-drag" >Drag me…</div>
	<div id="drag2" class="draggable js-drag" >Drag me…</div>
	<div id="drag3" class="draggable js-drag" >Drag me…</div>
	<div id="drag4" class="draggable js-drag" >Drag me…</div>
</div>

<div class="container containerTwo">
   <div class="page-header" id="banner">
    <div class="row">
<script>

var footer;

var orig;

//width around 991 or 992?

var offset = 85; //34 pixels is the arbitrary offset I've used for the navbar, but that's on top of any additional padding

var body = document.body,
    html = document.documentElement;

var height = Math.max( body.scrollHeight, body.offsetHeight, 
                       html.clientHeight, html.scrollHeight, html.offsetHeight );

//alert("body.scrollHeight: " + body.scrollHeight + " | body.offsetHeight:" + body.offsetHeight + " | html.clientHeight: " + html.clientHeight + " | html.scrollHeight: " + html.scrollHeight + " | html.offsetHeight: " + html.offsetHeight);

//alert(parseInt($(window).height()));
//alert(parseInt($(window).width()));





adjust = function() {

	if(parseInt($(window).width())-30 > (html.clientHeight-offset) ){ 
		//standard view (with columns)

		//use the lesser value (in this case, the width of the window)
		var totalHeight = parseInt($(window).height()) - offset;
		$('#rapper').width(totalHeight);
		$('#rapper').height(totalHeight);

		$('#whole').height(totalHeight / 3);
			$('#whole').width(totalHeight);
		$('#left').height(totalHeight / 3 * 2);
		$('#left').width(totalHeight / 2);
		$('#right').height(totalHeight / 3 * 2);
		$('#right').width(totalHeight / 2);
		
		/*elements = document.getElementsByClassName('draggable');
		for (var i = 0; i < elements.length; i++) {
			elements[i].style.height(totalHeight / 12);
			elements[i].style.width(totalHeight / 3);
		}*/

		$('.draggable').css('height',totalHeight / 15);
		$('.draggable').css('width',totalHeight / 3);
		
		$('.draggable').css('font-size',totalHeight / 50);
		
		
		//alert(parseInt($('#whole').height()) * parseInt($('#whole').width()) )
	//	alert(parseInt($('#left').height()) * parseInt($('#left').width()) )
	}
	else if(parseInt($(window).width())-30 < (html.clientHeight-offset) ){
		//option select view

		var totalHeight = parseInt($(window).width()) -30;
		$('#rapper').width(totalHeight);
		$('#rapper').height(totalHeight);

		$('#whole').height(totalHeight / 3);
			$('#whole').width(totalHeight);
		$('#left').height(totalHeight / 3 * 2);
		$('#left').width(totalHeight / 2);
		$('#right').height(totalHeight / 3 * 2);
		$('#right').width(totalHeight / 2);
		
			$('.draggable').css('height',totalHeight / 15);
			$('.draggable').css('width',totalHeight / 3);

			$('.draggable').css('font-size',totalHeight / 50);
	}

	$('#left-mods').height(parseInt($(window).height()) - offset);  
	$('#right-mods').height(parseInt($(window).height()) - offset);
	
	// need to display ALTERNATIVE to columns when the screen is too small for columns.
	// if width is less than certain number
	// show hidden div of option select stuff
	// hide column divs
	// else case that displays the columns and hides the option selects when screen is big enough
	
	
	//update position for all draggables...
	//load the data-positions (which will be percentages), convert to coordinates
	// I don't know if this is possible using screen widths...
	// I don't think it is ... ?
	//
	// let's amend the approach...
	// convert the percentage... into coordinates relative to the width/height of the zones... 
	// and then calculate the offset, and add that, yo
	
	
	// see this?
	/*
	  event.target.style.left = event.interaction.x + 'px';
      event.target.style.top  = event.interaction.y + 'px';
    */
	// that's what I'll adjust.
	// I have those values stored in the data... data-x, data-y ... and thanks to my modification... 
	// have the screen size at which it was last moved, too. I think data-scr-x and data-scr-y

};

$(document).ready(adjust);

$(document).on('page:load', adjust);

window.addEventListener('resize', adjust);



//separate

/*
//example 
function toggleHide(value) {
  $("#"+value).nextUntil('tr.header').slideToggle(100);

  if($("#"+value).data('toggle-info').toString() == 'false'){
	$("#"+value+"-button").html("<i class='fa fa-plus-circle'></i>");
	// $("#"+value+"-minus").hide();
	// $("#"+value+"-minus").show();
    $("#"+value).data("toggle-info","true");
   
  }

  else{
	$("#"+value+"-button").html("<i class='fa fa-minus-circle'></i>");
	$("#"+value).data("toggle-info","false");
  }
}
*/

(function (interact) {

    'use strict';

    var transformProp;

    interact.maxInteractions(Infinity);

    // setup draggable elements.
    interact('.js-drag')
        .draggable({ max: Infinity })
        .on('dragstart', function (event) {
            event.interaction.x = parseInt(event.target.getAttribute('data-x'), 10) || 0;
            event.interaction.y = parseInt(event.target.getAttribute('data-y'), 10) || 0;
        })
        .on('dragmove', function (event) {
            event.interaction.x += event.dx;
            event.interaction.y += event.dy;

            if (transformProp) {
                event.target.style[transformProp] =
                    'translate(' + event.interaction.x + 'px, ' + event.interaction.y + 'px)';
            }
            else {
                event.target.style.left = event.interaction.x + 'px';
                event.target.style.top  = event.interaction.y + 'px';
            }
        })
        .on('dragend', function (event) {
            event.target.setAttribute('data-x', event.interaction.x);
            event.target.setAttribute('data-y', event.interaction.y);
			event.target.setAttribute('scr-x', parseInt($(window).width()) -30);
            event.target.setAttribute('scr-y', parseInt($(window).height()) - offset);
        });

    // setup drop areas.
    // dropzone #1 accepts draggable #1
    setupDropzone('#whole', '#drag1');
    // dropzone #2 accepts draggable #1 and #2
    setupDropzone('#left', '#drag1, #drag2');
    // every dropzone accepts draggable #3
    setupDropzone('.js-drop', '#drag3');

    /**
     * Setup a given element as a dropzone.
     *
     * @param {HTMLElement|String} el
     * @param {String} accept
     */
    function setupDropzone(el, accept) {
        interact(el)
            .dropzone({
                accept: accept,
                ondropactivate: function (event) {
                    addClass(event.relatedTarget, '-drop-possible');
					//send form
                },
                ondropdeactivate: function (event) {
                    removeClass(event.relatedTarget, '-drop-possible');
					//this function may not be necessary...
                }
            })
            .on('dropactivate', function (event) {
                var active = event.target.getAttribute('active')|0;

                // change style if it was previously not active
                if (active === 0) {
                    addClass(event.target, '-drop-possible');
                    event.target.textContent = 'Drop me here!';
                }

                event.target.setAttribute('active', active + 1);
            })
            .on('dropdeactivate', function (event) {
                var active = event.target.getAttribute('active')|0;

                // change style if it was previously active
                // but will no longer be active
                if (active === 1) {
                    removeClass(event.target, '-drop-possible');
                    event.target.textContent = 'Dropzone';
                }

                event.target.setAttribute('active', active - 1);
            })
            .on('dragenter', function (event) {
                addClass(event.target, '-drop-over');
                event.relatedTarget.textContent = 'I\'m in';
            })
            .on('dragleave', function (event) {
                removeClass(event.target, '-drop-over');
                event.relatedTarget.textContent = 'Drag me…';
            })
            .on('drop', function (event) {
                removeClass(event.target, '-drop-over');
                event.relatedTarget.textContent = 'Dropped';
            });
    }

    function addClass (element, className) {
        if (element.classList) {
            return element.classList.add(className);
        }
        else {
            element.className += ' ' + className;
        }
    }

    function removeClass (element, className) {
        if (element.classList) {
            return element.classList.remove(className);
        }
        else {
            element.className = element.className.replace(new RegExp(className + ' *', 'g'), '');
        }
    }

    interact(document).on('ready', function () {
        transformProp = 'transform' in document.body.style
            ? 'transform': 'webkitTransform' in document.body.style
            ? 'webkitTransform': 'mozTransform' in document.body.style
            ? 'mozTransform': 'oTransform' in document.body.style
            ? 'oTransform': 'msTransform' in document.body.style
            ? 'msTransform': null;
    });

}(window.interact));

</script>

<% else %>
interface <%= @item.interface %> not yet built
<% end %>


<% end %>