<% unless @item.fancy_interface %>

<% unless notice.nil? %>
	<div class="alert alert-info alert-dismissible" role="alert" onclick="footer">
	  <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
	  <i class="fa fa-info-circle"></i>
	  <span class="sr-only">Notice:</span>
	  <%= notice %>
	</div>
<% end %>

<% unless alert.nil? %>
	<div class="alert alert-danger alert-dismissible" role="alert" onclick="footer">
	  <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
	  <i class="fa fa-exclamation-circle"></i>
	  <span class="sr-only">Alert:</span>
	  <%= alert %>
	</div>
<% end %>



<h1><%= @item.name %></h1>

	<div class="well bg-info"><b><span class="text-primary">Description: </span></b><%= @item.description %></div>
	
	
	<% c_item = @cart_item %>

	
	<% # sizes = ItemSize.all.select{ |t| t.item_id == @item.id } %>
	<% #above is the old code. Now we're looking for the appliedsizes %>
	<% sizes = AppliedSize.all.select{ |t| t.item_id == @item.id }%>
	<% if sizes.any? %>
		<% # show selected size %>
		<% collection_of_sizes = [] %>
		<% sizes.each do |applied_size| %>
			<% size = ItemSize.find(applied_size.item_size_id) %>
			<% collection_of_sizes.push size %>
			<% # need to work on sorting!!! %>
		<% end %>
		
		<% # first look for a size already... if there is not already a selected size, %>
		<% possible_sizes = SelectedSize.all.select{ |t| t.cart_item_id == @cart_item.id}%>
		<% unless possible_sizes.any? %>
			<% selection = SelectedSize.new %>
			<%# message = "No size selected"%>
		<% else %>
			<% selection = possible_sizes.first %>
			<% # code to look up the default size (item.size), set the option elect to that value?%>
		<% end %>
		
			<%= form_for(selection, :remote => true, :html=>{:id=>"sizeBox", :style=>"" }, validate: true) do |g| %>
		     <div class="form-group">
	  			<b>Size</b><br>
				<%= g.hidden_field :cart_item_id, :value => @cart_item.id %>
				<div id="sizeBoxError"></div>

				<%= g.select :item_size_id, options_from_collection_for_select(collection_of_sizes, 'id', 'name'), { :prompt => "Select a size" }, :id => "sizeBoxSelect", onchange: " if ( $( '#sizeBoxSelect' ).val()=='' )
	   { $('#sizeBoxError').html('<p>Please do not try to select the placeholder.</p>'); } else { $('#sizeBox').submit(); $('#sizeBoxError').html(''); }", class: "form-control" %>


			  </div>

			<% end %>
		
		
	<% else %>
	<% # There aren't any sizes, default price please%>	
		<% #logically, there couldn't be a selected size if there weren't any sizes to select from %>
	<% end %>
	
	<div id="modifier_groups">
		
	<% options = AppliedModGroup.all.select{ |t| t.item_id == @item.id } %>
	<% options.each do |applied_mod_group| %>
		<% modifier_groups = ModifierGroup.all.select{ |t| t.id == applied_mod_group.modifier_group_id }%>
		
		<% modifier_groups.each do |modifier_group| %>
			<% if modifier_group.child %>
				<% grouped_modifiers = GroupedModifier.all.select{ |t| t.modifier_group_id == modifier_group.parent_modifier_group_id }%>
			<% else %>
				<% grouped_modifiers = GroupedModifier.all.select{ |t| t.modifier_group_id == modifier_group.id }%>
			<% end %>
			<% collection_of_mods = [] %>
			<% grouped_modifiers.each do |grouped_modifer| %>
				<% modifier = Modifier.find(grouped_modifer.modifier_id) %>
				
				<% unless ( modifier_group.prevent_incest && (SelectedModifier.all.select{ |t| t.cart_item_id == @cart_item.id && t.modifier_id == modifier.id}.any?) ) || (SelectedModifier.all.select{ |t| t.cart_item_id == @cart_item.id && t.modifier_id == modifier.id && t.applied_mod_group_id == modifier_group.id }.any?) %>
			    
				
					<% collection_of_mods.push modifier %>
				<% end %>
				
			<% end%>

			<% selected_mod = SelectedModifier.new %>
			<% tempName = modifier_group.name.tr(' ', '_').camelize %>
			<%= form_for(selected_mod, :remote => true, :html=>{:id=>"#{tempName}", :style=>"" }, validate: true) do |g| %>
		     <div class="form-group">
			  <% if(collection_of_mods.any?) %>
	  			<b><%= modifier_group.name %></b><br>
				<%= g.hidden_field :cart_item_id, :value => @cart_item.id %>
				<%= g.hidden_field :applied_mod_group_id, :value => modifier_group.id %>
				<div id="<%= tempName %>Error"></div>
				
				<%= g.select :modifier_id, options_from_collection_for_select(collection_of_mods, 'id', 'name'), { :prompt => "Select '#{modifier_group.name}'" }, :id => "#{tempName}Select", onchange: " if ( $( '##{tempName}Select' ).val()=='' )
	   { $('##{tempName}Error').html('<p>Please do not try to select the placeholder.</p>'); } else { $('##{tempName}').submit(); $('##{tempName}Error').html(''); }", class: "form-control" %>
	
				<% else %>
				<b><%= modifier_group.name %></b><br>
				<div id="<%= tempName %>Error"></div>

				<%= g.select :modifier_id, options_from_collection_for_select(collection_of_mods, 'id', 'name'), { :prompt => "All '#{modifier_group.name.pluralize}' selected." }, :id => "#{tempName}Select", :disabled => "disabled", onchange: " if ( $( '##{tempName}Select' ).val()=='' )
	   { $('##{tempName}Error').html('<p>Please do not try to select the placeholder.</p>'); } else { $('##{tempName}').submit(); $('##{tempName}Error').html(''); }", class: "form-control" %>

				<% end %>
			  </div>

			<% end %>
		<% end %>	
	<% end %>
	</div>
	
	<div id="selected_modifiers">

	<% selected_mods = SelectedModifier.all.select{ |t| t.cart_item_id == @cart_item.id }%>
	<% next_hue = 5 %>
		<div class="row" style="margin-bottom: -20px;">
			<% count = selected_mods.count %>
			<% unless selected_mods.blank? %>
			<% selHue = SelectedModifier.find(selected_mods.last.id).hue %>
			<%# puts "selHue: "+selHue %>
			<% end %>
			
			<% selected_mods.each_with_index do |sel, i| %>
				<% mod = Modifier.find(sel.modifier_id) %>
				<% remainderA = count%3 %>
				<% remainderB = count%4 %>

					<div class="col-xs-6 col-sm-4 col-md-3 col-lg-2">
				
				<% next_hue = next_hue + 1 %>
				<% string = next_hue.to_s(2) # 5, written out as 32bit %>
				
				<%# unless selHue.blank? %>
				<% if sel.hue.blank? %>
				  <% if i > 0 %>
				    <% sel.hue = ((selected_mods[i-1].hue).to_i+1).to_s %>
				  <% else %>
				    <% sel.hue = 6 %>
				  <% end %>
				<% end %>
				
		
					<% string = sel.hue.to_i.to_s(2) %>
					
					<%# else %>
						<%# set hue to five... + 1 %>
						<%# selHue = 5 %>
						<%# string = sel.hue.to_i.to_s(2) %>
					<%# end %>
					
				<% if string.length < 32 %>
					<% num = 32 - string.length %>
					<% newString = "" %>
					<% for i in 1..num do %>
						<% newString += "0" %>
					<% end %>
					<% newString += string %>
					<% string = newString %>
				<% end %>
				<% puts "string"+sel.hue.to_s+": "+string %>
				<% num = reverse(string).to_i(2) %>
				<% numF = num.to_f / (2**32) %>
				
				<% hue = ((numF + 0.6) % 1) %>
				<% degrees = (hue * 360).round # going to save degrees to selected_modifier.color %>
				<% if sel.color.blank? %>
				<% puts "blankblankblank" %>
				
				<% sel.color = degrees.to_s %>

				
				<% end %>
								<% sel.save %>
				
				<% panelStyle = "border-color: hsl(" + sel.color + ", 25%, 65%);" %>
				<% panelHeading = "background-color: hsl(" + sel.color + ", 50%, 65%); border-color: hsl(" + sel.color + ", 25%, 65%);" %>
						<div class="panel panel-info <%= sel.hue %>" style="<%= panelStyle %>" >
					  		<div class="panel-heading" style="<%= panelHeading %>" >
								<% groop = ModifierGroup.find(sel.applied_mod_group_id) %>
								<% if groop.child %>
									<h3 class="panel-title"><%= groop.prepend_name %> <%= mod.name %></h3>
								<% else %>
					    			<h3 class="panel-title"><%= mod.name %></h3>
								<% end %>
					  		</div>
					  		<div class="panel-body">
					    		Further options.<br>
								form to display all the modifier groups, and a button to check if the particular modifier can be added?
								<br>
								<div class="add-button">
									<%= link_to 'Remove', sel, method: :delete, class: "btn btn-primary btn-xs btn-block", style: "", :remote => true %>
								</div>
					  		</div>
						</div>
					</div>
			<% end %>
			
		</div>
		</div>

<%= render 'form' %>

<%= link_to 'Back', orders_path, class: "btn btn-default" %>

<% else %>

<% if @item.interface==1 %>

<style>

#main {
			background-color: rgb(255,220,220);

		}
			
		#sidebar {
			background-color: rgb(220,255,220);

		}
		


		.dropzone-wrapper {

		}

		.dropzone {

		}

		.dropzone.-drop-possible { border-color: #666; }

		.dropzone.-drop-over {
		    background: #666;
		    color: #fff;
		}

		.draggable {
		    position: relative;
		    z-index: 10;
		    width: 200px;
		    margin: .25em;
		    padding: 1em 2em;
		    background-color: #29e;
		    color: #fff;
		    text-align: center;

		    -ms-touch-action: none;
		        touch-action: none;
		}

		.display {
		    position: relative;
		    z-index: 10;
		    width: 200px;
		    margin: .25em;
		    padding: 1em 2em;
		    background-color: #29e;
		    color: #fff;
		    text-align: center;

		    -ms-touch-action: none;
		        touch-action: none;
		}
		
		.draggable.-drop-possible { background-color: #42bd41; }
		
</style>

	


	<!--
	
	<div class="col-md-3" style="background-color: rgb(220,220,255)">.col-md-1</div>
	  <div class="col-md-6">
	  	<div class="row" id="main" style="height:150px;">
			<div class="col-md-6" id="whole">whole</div>
		</div>
		<div class="row" id="sidebar" style="height:300px;">
		  <div class="col-md-6" id="left" style="background-color: rgb(220,255,220);height:300px;">left</div>
		  <div class="col-md-6" id="right" style="background-color: rgb(110, 255,110);height:300px;">right</div>
		</div>
	  </div>
	<div class="col-md-3" style="background-color: rgb(220,220,255)">.col-md-1</div>
	  -->
	<div style="position: relative;float: none;">
		<% options = AppliedModGroup.all.select{ |t| t.item_id == @item.id } %>

	<div id="rapper"  style="position: absolute;float: none; left: 0;right: 0;margin: 0 auto;">
		<% options.each do |applied_mod_group| %>
			<%# This actually isn't very good. What about the possibility someone assigns multiple mod_groups with interface_position of one? Then I have overlapping columns, and multiple forms with the same ID. I need a COLUMN_MODS attribute on the CART_ITEM and look ip up that way. This is something I will have to do eventually. %>
			<% modifier_groups = ModifierGroup.all.select{ |t| t.id == applied_mod_group.modifier_group_id }%>
			
			<% modifier_groups.each do |group| %>
		
				<% if group.interface_position==1 %>
					<div id="whole" class="dropzone js-drop" style="background-color: rgb(255,220,220);height:300px;" data-gid="<%= group.id %>" data-pn="<%= group.prepend_name %>">whole</div>
			
				<% elsif group.interface_position==2 %>
					<div id="left" class="dropzone js-drop" style="background-color: rgb(220,255,220);width:50%;float:left; clear:left;" data-gid="<%= group.id %>" data-pn="<%= group.prepend_name %>">left</div>
			
				<% elsif group.interface_position==3 %>
					<div id="right" class="dropzone js-drop" style="background-color: rgb(110, 255,110);width:50%;float:left;" data-gid="<%= group.id %>" data-pn="<%= group.prepend_name %>">right</div>
				<% end %>
			
			<% end %>
		<% end %>
		
		
			
	</div>

</div>

</div>

</div>

</div>
	
		<% collection_of_left_mods = [] %>
		<% collection_of_right_mods = [] %>
		
		<% selected_mods = SelectedModifier.all.select{ |t| t.cart_item_id == @cart_item.id }%>
		
		<% options.each do |applied_mod_group| %>
			<%# This actually isn't very good. What about the possibility someone assigns multiple mod_groups with interface_position of one? Then I have overlapping columns, and multiple forms with the same ID. I need a COLUMN_MODS attribute on the CART_ITEM and look ip up that way. This is something I will have to do eventually. %>
			<% modifier_groups = ModifierGroup.all.select{ |t| t.id == applied_mod_group.modifier_group_id && t.interface_position == 1}%>

			<% modifier_groups.each do |modifier_group| %>
				<% if modifier_group.child %>
					<% grouped_modifiers = GroupedModifier.all.select{ |t| t.modifier_group_id == modifier_group.parent_modifier_group_id }%>
				<% else %>
					<% grouped_modifiers = GroupedModifier.all.select{ |t| t.modifier_group_id == modifier_group.id }%>
				<% end %>
				
				<% grouped_modifiers.each do |grouped_modifer| %>
					<% modifier = Modifier.find(grouped_modifer.modifier_id) %>
					
					<% unless ( modifier_group.prevent_incest && (SelectedModifier.all.select{ |t| t.cart_item_id == @cart_item.id && t.modifier_id == modifier.id}.any?) ) || (SelectedModifier.all.select{ |t| t.cart_item_id == @cart_item.id && t.modifier_id == modifier.id && t.applied_mod_group_id == modifier_group.id }.any?) %>


						<!-- change the display if it is selected... the class or css -->
					<% end %>
					<% if modifier.interface_column == 1 %>
						<% collection_of_left_mods.push modifier %>
					<% elsif modifier.interface_column == 2 %>
						<% collection_of_right_mods.push modifier %>
					<% end %>
				<% end %>
			
			
			<!-- draw stuff here? -->
			<% selected_mod = SelectedModifier.new %>
			<% tempName = modifier_group.name.tr(' ', '_').camelize %>
			<%= form_for(selected_mod, :remote => true, :html=>{:id=>"fancyForm", :style=>"" }, validate: true) do |g| %>
		
			<%= g.hidden_field :cart_item_id, :value => @cart_item.id %>
			<%= g.hidden_field :applied_mod_group_id, :value => modifier_group.id %>
			<%= g.hidden_field :modifier_id, :value => collection_of_left_mods.first.id, :id => "mod_field" %>
			
			<%= g.hidden_field :xpos, :value => 50, :id => "xpos_field" %>
			<%= g.hidden_field :ypos, :value => 10, :id => "ypos_field" %>
			<%= g.hidden_field :scrx, :value => 150, :id => "scrx_field" %>
			<%= g.hidden_field :scry, :value => 150, :id => "scry_field" %>
			<%= g.hidden_field :rapper, :value => 100, :id => "rapper_field" %>
			<% puts selected_mods.include?(selected_mods.first) %>
			
			<%# Okay, so, %>
			<div style="clear:both;">
				<div id="left-mods" style="float:left; overflow-y:scroll;height:400px; overflow-x: visible;margin-top: -10px;">
					<% collection_of_left_mods.each do |mod| %>
				
						<% if selected_mods.select{|t| t.modifier_id == mod.id }.empty? %>
						<div id="mod-<%= mod.id %>" class="display" onclick="clicky(<%= mod.id %>);"><%= mod.name %></div>
						<%# check to see if it exists in the collection of selected_mods, if it does, just change the class that it is to display it in a different color or something. %>
						
						<% else %>
							<div id="mod-<%= mod.id %>" class="display" style="background-color:#42bd41;" onclick="destroy(<%= mod.id %>);"><%= mod.name %></div>
						<%# check to see if it exists in the collection of selected_mods, if it does, just change the class that it is to display it in a different color or something. %>
						<% end %>
						
					<% end %>
				</div>
			
				<div id="right-mods" style="float:right; overflow-y:scroll;height:400px; overflow-x: visible;margin-top: -10px;">
					<% collection_of_right_mods.each do |mod| %>
				
						<% if selected_mods.select{|t| t.modifier_id == mod.id }.empty? %>
						<div id="mod-<%= mod.id %>" class="display" onclick="clicky(<%= mod.id %>);"><%= mod.name %></div>
						<%# check to see if it exists in the collection of selected_mods, if it does, just change the class that it is to display it in a different color or something. %>
						
						<% else %>
							<div id="mod-<%= mod.id %>" class="display" style="background-color:#42bd41;" onclick="destroy(<%= mod.id %>);"><%= mod.name %></div>
						<%# check to see if it exists in the collection of selected_mods, if it does, just change the class that it is to display it in a different color or something. %>
						<% end %>
						
					<% end %>
				</div>
			</div>
			
			
			<% end %>
			
			<% end %>
			
			
		<% end %>
	
		<%# selected modifiers, for each create a draggable %>
	
		
</div>
<div style="position: absolute; margin-top:-12px;">
	<%# as long as the top and left match the data... and the screen sizes... I can set the default position...%>
	<!-- <div id="drag1" class="draggable js-drag" style="" data-draggable="100px" data-x="150" data-y="50" data-scrx="200" data-scry="200" data-draggable="100">Drag me…</div> -->
	<!-- I can't start working on this until I have the selected modifiers... because I need the button click event to trigger some javascript that will position it for me -->
	
	
		<% selected_mods.each_with_index do |sel, i| %>
			<% mod = Modifier.find(sel.modifier_id) %>
			<%# I'm guessing that the form needs to send the selected_modifier the x y screenx scry and rapper stuff, so I can do the calculation... and default the modifier to the center of the screen. NEED TO SET UP DROP ZONES TO RECEIVE EACH DRAGGABLE. %>
			<div id="drag-<%= sel.id %>" class="draggable js-drag" data-x="<%= sel.xpos %>" data-y="<%= sel.ypos %>" data-scrx="<%= sel.scrx %>" data-scry="<%= sel.scry %>" data-rapper="<%= sel.rapper %>" data-sel="<%= sel.id %>" data-mn="<%= mod.name %>" ><%= mod.name %></div>
			<!-- also need to ... give the user the instruction to drag it around (because it won't automatically be part of a group)
			maybe it should say, instead of the topping name "Drag me!" and then change color and display the proper name at that point. -->
			
			<%= form_for(sel, :remote => true, :html=>{:id=>"form-#{sel.id}", :style=>"" }, validate: true) do |g| %>
				<%= g.hidden_field :applied_mod_group_id, :value => sel.applied_mod_group_id, :id=>"group-#{sel.id}" %>
				<%= g.hidden_field :xpos, :value => sel.xpos, :id=>"xpos-#{sel.id}" %>
				<%= g.hidden_field :ypos, :value => sel.ypos, :id=>"ypos-#{sel.id}" %>
				<%= g.hidden_field :scrx, :value => sel.scrx, :id=>"scrx-#{sel.id}" %>
				<%= g.hidden_field :scry, :value => sel.scry, :id=>"scry-#{sel.id}" %>
				<%= g.hidden_field :rapper, :value => sel.rapper, :id=>"rapper-#{sel.id}" %>
				
			<% end %>
			
			
		<% end %>
	

<div class="container containerTwo">
   <div class="page-header" id="banner">
    <div class="row">
<script>

var footer;

var orig;

//width around 991 or 992?

var offset = 85; //34 pixels is the arbitrary offset I've used for the navbar, but that's on top of any additional padding
// 60 + 15, maybe? I can't recall.
var body = document.body,
    html = document.documentElement;

var height = Math.max( body.scrollHeight, body.offsetHeight, 
                       html.clientHeight, html.scrollHeight, html.offsetHeight );

//alert("body.scrollHeight: " + body.scrollHeight + " | body.offsetHeight:" + body.offsetHeight + " | html.clientHeight: " + html.clientHeight + " | html.scrollHeight: " + html.scrollHeight + " | html.offsetHeight: " + html.offsetHeight);

//alert(parseInt($(window).height()));
//alert(parseInt($(window).width()));





adjust = function() {

	if(parseInt($(window).width())-30 > (html.clientHeight-offset) ){ 
		//standard view (with columns)

		//use the lesser value (in this case, the width of the window)
		var totalHeight = parseInt($(window).height()) - offset;
		$('#rapper').width(totalHeight);
		$('#rapper').height(totalHeight);

		$('#whole').height(totalHeight / 3);
			$('#whole').width(totalHeight);
		$('#left').height(totalHeight / 3 * 2);
		$('#left').width(totalHeight / 2);
		$('#right').height(totalHeight / 3 * 2);
		$('#right').width(totalHeight / 2);
		
		/*elements = document.getElementsByClassName('draggable');
		for (var i = 0; i < elements.length; i++) {
			elements[i].style.height(totalHeight / 12);
			elements[i].style.width(totalHeight / 3);
		}*/

		$('.draggable').css('height',totalHeight / 15);
		$('.draggable').css('width',totalHeight / 3);
		
		$('.draggable').css('font-size',totalHeight / 50);
		
		
		//alert(parseInt($('#whole').height()) * parseInt($('#whole').width()) )
	//	alert(parseInt($('#left').height()) * parseInt($('#left').width()) )
	}
	else if(parseInt($(window).width())-30 < (html.clientHeight-offset) ){
		//option select view

		var totalHeight = parseInt($(window).width()) -30;
		$('#rapper').width(totalHeight);
		$('#rapper').height(totalHeight);

		$('#whole').height(totalHeight / 3);
			$('#whole').width(totalHeight);
		$('#left').height(totalHeight / 3 * 2);
		$('#left').width(totalHeight / 2);
		$('#right').height(totalHeight / 3 * 2);
		$('#right').width(totalHeight / 2);
		
			$('.draggable').css('height',totalHeight / 15);
			$('.draggable').css('width',totalHeight / 3);

			$('.draggable').css('font-size',totalHeight / 50);
	}

	$('#left-mods').height(parseInt($(window).height()) - offset);  
	$('#right-mods').height(parseInt($(window).height()) - offset);
	
	// need to display ALTERNATIVE to columns when the screen is too small for columns.
	// if width is less than certain number
	// show hidden div of option select stuff
	// hide column divs
	// else case that displays the columns and hides the option selects when screen is big enough
	
	
	//update position for all draggables...
	//load the data-positions (which will be percentages), convert to coordinates
	// I don't know if this is possible using screen widths...
	// I don't think it is ... ?
	//
	// let's amend the approach...
	// convert the percentage... into coordinates relative to the width/height of the zones... 
	// and then calculate the offset, and add that, yo
	
	
	// see this?
	/*
	  event.target.style.left = event.interaction.x + 'px';
      event.target.style.top  = event.interaction.y + 'px';
    */
	// that's what I'll adjust.
	// I have those values stored in the data... data-x, data-y ... and thanks to my modification... 
	// have the screen size at which it was last moved, too. I think data-scr-x and data-scr-y
	
	
	// THIS CODE DOESN'T NEED TO BE EXECUTED ON LOAD, WHICH MEANS I SHOULD MOVE IT
	var drags = $('.draggable')
	var i;
	for (i = 0; i < drags.length; i++) {
		//this actually sets the values... just need to figure out the math now...
	    //drags[i].style.left = 50 + 'px';
		//drags[i].style.top = 100 + 'px';
		
		
		
		//how to get
		//alert(drags[i].dataset.x.toString())
		
		//how to set 
		//drags[i].dataset.x = "base.gif";
		
		
		
		var x = drags[i].dataset.x;
		var y = drags[i].dataset.y;
		var scrx = drags[i].dataset.scrx;
		var scry = drags[i].dataset.scry;
		var rapper = drags[i].dataset.rapper;
		
		
	
		
		var newScrx = parseInt($(window).width());
		var newScry =  parseInt($(window).height());
		var newRapper = parseInt($('#rapper').width());
		
		// so now I need to figure out where the drop zones start... the container of dropzones...
		// get the 'rapper' width || height (they're the same)
		// get the window width - rapper.w
		// that SHOULD be the X value that the thing begins at.
		
		var newX = (x - (scrx - rapper)/2)*(newRapper/rapper) + (newScrx-newRapper)/2;
		//alert(scry.toString());
		var newY = (y) * (newRapper/rapper) + (rapper/(newRapper))/2; // - (newScry/scry)
		//rapper/newRapper reverses the effect to about the same degree as when there is no modification/offset at all
		
		// gonna hafta (y + something) * newR/r - somethingUsingNewVersionsOfVariables
		
		drags[i].style.left = newX + 'px';
		drags[i].style.top = newY + 'px';
		
	}
	
	

};

$(document).ready(adjust);

$(document).on('page:load', adjust);

window.addEventListener('resize', adjust);



//separate

/*
//example 
function toggleHide(value) {
  $("#"+value).nextUntil('tr.header').slideToggle(100);

  if($("#"+value).data('toggle-info').toString() == 'false'){
	$("#"+value+"-button").html("<i class='fa fa-plus-circle'></i>");
	// $("#"+value+"-minus").hide();
	// $("#"+value+"-minus").show();
    $("#"+value).data("toggle-info","true");
   
  }

  else{
	$("#"+value+"-button").html("<i class='fa fa-minus-circle'></i>");
	$("#"+value).data("toggle-info","false");
  }
}
*/

(function (interact) {

    'use strict';

    var transformProp;

    interact.maxInteractions(Infinity);

    // setup draggable elements.
    interact('.js-drag')
        .draggable({ max: Infinity })
        .on('dragstart', function (event) {
            event.interaction.x = parseInt(event.target.getAttribute('data-x'), 10) || 0;
            event.interaction.y = parseInt(event.target.getAttribute('data-y'), 10) || 0;
			
			//alert(event.target.getAttribute('data-scrx'));
			var x = parseInt(event.target.getAttribute('data-x'));
			var y = parseInt(event.target.getAttribute('data-y'));
			var scrx = parseInt(event.target.getAttribute('data-scrx'));
			var scry = parseInt(event.target.getAttribute('data-scry'));
			var rapper = parseInt(event.target.getAttribute('data-rapper'));
			var newScrx = parseInt($(window).width());
			var newScry =  parseInt($(window).height());
			var newRapper = parseInt($('#rapper').width());
			
			//alert(scrx.toString());
			
			
			
			if((scrx!=newScrx || scry!=newScry) && !isNaN(scrx) ){
				// redefine x and y values...
				event.interaction.x = (x - (scrx - rapper)/2)*(newRapper/rapper) + (newScrx-newRapper)/2;
				//alert(scry.toString());
				event.interaction.y = (y) * (newRapper/rapper) + (rapper/(newRapper))/2; // - (newScry/scry)
			}

			// will want use that scaling stuff that I eventually figure out... 
			// if data-scr-x is null, would that mean it hasn't been moved yet?
			// BTW all this stuff needs to be saved, in the form... on the selected_modifier
			// so I can recreate the layout when an already configured thing is reopened.
			
			//interaction.x needs to be the NEW screen stuff... the top... and left... values...
			//alert(event.target.getAttribute('left'));
			// well, just tested it. doesn't work. left and top... are null...
			
			// so I'll have to calculate it again, methinks...
			
        })
        .on('dragmove', function (event) {
            event.interaction.x += event.dx;
            event.interaction.y += event.dy;
			// this is what is at current messing things up...

            if (transformProp) {
                event.target.style[transformProp] =
                    'translate(' + event.interaction.x + 'px, ' + event.interaction.y + 'px)';
            }
            else {
                event.target.style.left = event.interaction.x + 'px';
                event.target.style.top  = event.interaction.y + 'px';
            }
        })
        .on('dragend', function (event) {
            event.target.setAttribute('data-x', event.interaction.x);
            event.target.setAttribute('data-y', event.interaction.y);
			event.target.setAttribute('data-scrx', parseInt($(window).width()));
            event.target.setAttribute('data-scry', parseInt($(window).height()));
			event.target.setAttribute('data-rapper', parseInt($('#rapper').width()));
			
        });

    // setup drop areas.
    // dropzone #1 accepts draggable #1
 


	//setup each dropzone to accept each draggable.
	// when they are created, I'll need to give them unique IDs, and then use those IDs here to look them up.

	  setupDropzone('.js-drop', '<% selected_mods.each_with_index do |sel, i| %>#drag-<%= sel.id %><% if i < selected_mods.count - 1 %>, <% end %><% end %>');

	
	
    /**
     * Setup a given element as a dropzone.
     *
     * @param {HTMLElement|String} el
     * @param {String} accept
     */
    function setupDropzone(el, accept) {
        interact(el)
            .dropzone({
                accept: accept,
                ondropactivate: function (event) {
                    addClass(event.relatedTarget, '-drop-possible');
					//send form
                },
                ondropdeactivate: function (event) {
                    removeClass(event.relatedTarget, '-drop-possible');
					//this function may not be necessary...
                }
            })
            .on('dropactivate', function (event) {
                var active = event.target.getAttribute('active')|0;

                // change style if it was previously not active
                if (active === 0) {
                    addClass(event.target, '-drop-possible');
                    event.target.textContent = 'Drop me here!';
                }

                event.target.setAttribute('active', active + 1);
            })
            .on('dropdeactivate', function (event) {
                var active = event.target.getAttribute('active')|0;

                // change style if it was previously active
                // but will no longer be active
                if (active === 1) {
                    removeClass(event.target, '-drop-possible');
                    event.target.textContent = 'Dropzone';
                }

                event.target.setAttribute('active', active - 1);
            })
            .on('dragenter', function (event) {
                addClass(event.target, '-drop-over');
                event.relatedTarget.textContent = 'I\'m in';
            })
            .on('dragleave', function (event) {
                removeClass(event.target, '-drop-over');
                event.relatedTarget.textContent = 'Drag me…';
            })
            .on('drop', function (event) {
                
				// now how do I determine which dropzone it is? left right or whole?
				
//				alert(event.relatedTarget.getAttribute('data-x'));
				//alert(event.interaction.x);
			
				var selId = event.relatedTarget.getAttribute('data-sel');
				
				//alert(event.target.getAttribute('data-gid'));

	//				alert(selId);

				//alert(event.target.getAttribute('data-x'));

				//alert($('#xpos-'+selId).val());
				$('#xpos-'+selId).val(event.interaction.x);
				$('#ypos-'+selId).val(event.interaction.y);
				$('#scrx-'+selId).val(parseInt($(window).width()));
				$('#scry-'+selId).val(parseInt($(window).height()));
				$('#rapper-'+selId).val(parseInt($('#rapper').width())); 
				
				$('#group-'+selId).val(event.target.getAttribute('data-gid')); 
				
				// get form by id... then submit...
				// then redraw everything, SO IT NEEDS TO BECOME A PARTIAL... I can just refresh for now?
				$('#form-'+selId).submit();
				
				removeClass(event.target, '-drop-over');
                event.relatedTarget.textContent = event.target.getAttribute('data-pn') + ' '+ event.relatedTarget.getAttribute('data-mn');
				
            });
    }

    function addClass (element, className) {
        if (element.classList) {
            return element.classList.add(className);
        }
        else {
            element.className += ' ' + className;
        }
    }

    function removeClass (element, className) {
        if (element.classList) {
            return element.classList.remove(className);
        }
        else {
            element.className = element.className.replace(new RegExp(className + ' *', 'g'), '');
        }
    }

    interact(document).on('ready', function () {
        transformProp = 'transform' in document.body.style
            ? 'transform': 'webkitTransform' in document.body.style
            ? 'webkitTransform': 'mozTransform' in document.body.style
            ? 'mozTransform': 'oTransform' in document.body.style
            ? 'oTransform': 'msTransform' in document.body.style
            ? 'msTransform': null;
    });

}(window.interact));

function clicky(id){
	//alert(id);
	document.getElementById('mod_field').value=id;
	document.getElementById('xpos_field').value=50;
	document.getElementById('ypos_field').value=10;
	document.getElementById('scrx_field').value=150;
	document.getElementById('scry_field').value=150;
	document.getElementById('rapper_field').value=100;
	

	// get form by id... then submit...
	// then redraw everything, SO IT NEEDS TO BECOME A PARTIAL... I can just refresh for now?
	$('#fancyForm').submit();
}

</script>

<% else %>
interface <%= @item.interface %> not yet built
<% end %>


<% end %>